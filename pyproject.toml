[tool.poetry]
name = "roche-nonadditivity"
description = "A program to find key complex patterns in SAR data"
version = "2.1.0"
authors = [
    "Dr. Christian Kramer <christian.kramer@roche.com>",
    "Niels Maeder <niels.maeder@roche.com>",
]
maintainers = [
    "Dr. Laura Guasch <laura.guasch@roche.com>",
    "Niels Maeder <niels.maeder@roche.com>",
]
license = "LICENSE"
readme = "README.md"
keywords = ["SAR", "Cheminformatics", "MMP", "RDKit", "Nonadditivity"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Framework :: Pytest",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Chemistry",
]
packages = [{ include = "nonadditivity" }]
repository = "https://code.roche.com/cadd/intern-projects/NonadditivityAnalysis/"

[tool.poetry.urls]
"Bug Tracker" = "https://code.roche.com/cadd/intern-projects/NonadditivityAnalysis/issues"
"Source Code" = "https://code.roche.com/cadd/intern-projects/NonadditivityAnalysis/"

[tool.poetry.scripts]
nonadditivity = "nonadditivity.cli:main"

[tool.poetry.dependencies]
python = ">3.9,<3.13"
tqdm = "^4.64.1"
numpy = "^1.23.4"
pandas = "^2.0.0"
click = "^8.1.3"
mmpdb = "==2.1"
rdkit = "^2022.9.1"
ujson = "^5.5.0"
scipy = "^1.11.3"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
pre-commit = "^2.20.0"
ruff = "^0.0.292"
black = "^23.9.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:"]

[tool.black]
line-length = 88
target-version = ['py311']

[tool.ruff]
select = [
    "A",   # builtins
    "B",   # bugbear
    "C90", # mccabe
    "D",   # pydocstyle
    "E",   # pycodestyle error
    "F",   # pyflakes
    "I",   #isort
    "PD",  # pandas vet
    "PL",  # pylint
    "RUF", # ruff specific
    "UP",  # pyupgrade
    "W",   # pycodestyle warning
    "N",
    "ANN",
    "C4",
    "FA",
    "SIM",
    "PT",
    "TCH",
]
ignore = [
    "B905",    # zip is never used where objects could have different length
    "PLR0911", # too many return statements
    "PLR0913", # too many arguments to function call
    "PLR2004", # magic numbers
    "PT006",
    "PT011",
    "ANN002",
    "ANN003",
    "ANN101",  # self type annoataions
    "ANN401",  # allow any as type hint
]
line-length = 88
target-version = "py311"
include = ["nonadditivity", "tests"]
exclude = [
    ".git",
    "__pycache__",
    "docs",
    "examples",
    ".vscode",
    ".idea",
    ".mypy_cache",
    ".pytest_cache",
    ".eggs",
]
fix = true
fixable = ["I"]

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401"]
"nonadditivity/classification/classification_classes/circle.py" = ["E501"]

[tool.ruff.pycodestyle]
max-doc-length = 88

[tool.ruff.pydocstyle]
convention = "google"
